<!doctype html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="shortcut icon" type="image/x-icon" href="{{ asset('img/favicon.ico') }}">

    <!-- CSRF Token -->
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'Laravel') }}</title>

    <!-- Fonts -->
    <link rel="dns-prefetch" href="//fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css?family=Nunito" rel="stylesheet">

    @vite(['resources/js/app.js'])

</head>
<body>
<div id="app">
    <main class="py-4 text-capitalize m-4">
        <h2>Тестовое задание (перед выполнением ознакомьтесь ПОЛНОСТЬЮ)</h2>
        <hr>
        <h4> Развернуть проект на Yii 2 версии 2.0.47 (advanced-шаблон) или Laravel версии 9.3.12 или Symfony 6.2.0 и
            сделать два скрипта, а также CRUD без CREATE:
        </h4>
        <ul>
            <li>Скрипт авторизации в console-части, то есть он должен быть доступен через консоль на сервере (в Yii 2, к
                примеру, командой php yii cron/get-token). Принимает в параметрах логин и пароль - возвращает токен,
                действующий 5 минут, который нужно использовать для второго скрипта.


            </li>
            <li>Скрипт во frontend-части (поддержка GET, POST). Принимает данные в формате JSON и сохраняет в БД
                возвращая идентификатор, а также время и память затраченные на обработку запроса и сохранение объекта в
                БД. Скрипт должен работать исключительно с аутентификацией по токену, полученному в console-части.
                Аутентификация должна проходить по заголовку в запросе.
            </li>
            <li>
                CRUD (без CREATE) в backend-части. Отображает все сохраненные с frontend-части объекты в формате JSON с
                возможностью редактирования и удаления объектов. Просмотр должен предусматривать формирование из объекта
                JSON маркированный HTML-список с поддержкой разворачивания/сворачивания отдельных элементов. Элементы
                списка должны включать в себя название, тип объекта и значение в случае конца иерархии объектов.
            </li>
        </ul>
        <hr>
        <h4>Комментарии:</h4>

        <ul>
            <li>Второй скрипт должен работать как по GET, так и по POST. Можно сделать форму для удобства с выбором типа
                запроса.
                Описание “данные в формате JSON” подразумевает любые данные в формате JSON, включая вложенные массивы во
                вложенных массивах либо же пустой JSON. Скрипт не должен привязываться к какому-то конкретному
                JSON-объекту, он должен уметь обрабатывать любые данные в формате JSON.
                В advanced-шаблоне Yii 2 проект уже разделен на части - console, frontend и backend. В Laravel и Symfony
                это нужно проделать руками, формат - на ваше усмотрение, но части должны быть разделены явно и не просто
                разделением функционала в разные контроллеры, можете посмотреть как работает разделение приложений в Yii
                2 (https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/structure-applications.md) и
                придумать что-то похожее. Это будет для вас хорошим опытом и полезным навыком. Если не сможете
                разобраться, то сделайте, как минимум, разделение на модули.
            </li>
            <li>Весь проект и ход выполнения заданий нужно выложить в репозитории на GitHub, первый коммит - базовый
                advanced-шаблон Yii 2 или базовый шаблон Laravel или базовый шаблон Symfony. Обязательно описать файл
                README.md - как запустить проект и что он делает на английском, но не машинным переводом, так как
                вакансия подразумевает знание английского на уровне B1+. Также нужно добавить в README.MD пример конфига
                Nginx или Apache для запуска проекта.
            </li>
            <li>
                Также необходимо описать минимальный набор тестов, для того чтобы убедиться что ваше приложение
                работоспособно. Желательно использовать PHPUnit или Codeception.
            </li>
            <li> Перед выполнением тестового задания составить план работ/модулей которые надо реализовать. Дать оценку
                времени, которое будет затрачено на каждый из пунктов. Оформить каждый пункт как отдельный коммит. По
                окончанию реализации задачи записать сколько реально времени было потрачено и комментарий по
                необходимости.
            </li>
        </ul>

        <div class="container">
            <h4>Должен получиться примерно такой отчет:</h4>

        <table class="table table-bordered">
            <caption>Пример</caption>
            <thead>
            <tr>
                <th>Задача</th>
                <th>Оценка</th>
                <th>Затрачено</th>
                <th>Комментарий</th>
            </tr>
            <tr>
                <td>Настройка окружения</td>
                <td>1 час</td>
                <td>40 минут</td>
                <td>Нашел хорошую инструкцию</td>
            </tr>
            <tr>
                <td>Установка фреймворка</td>
                <td>20 минут</td>
                <td>30 минут</td>
                <td>Забыл установить composer</td>
            </tr>
            </thead>
        </table>
        </div>
        <hr>
        <p> Появятся вопросы - не стесняйтесь обращаться к HR, она ответит на любой вопрос, по необходимости уточнит его
            у тимлида.
        </p>
        <p>Удачи и надеемся, что у вас всё получится!</p>

    </main>
</div>
</body>
</html>
